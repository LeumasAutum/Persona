from django.shortcuts import render
from .models import VulnerabilityDB
from django.contrib.auth.decorators import login_required
from .forms import VulnerabilityDBForm
from django.http import HttpResponseRedirect
from django.http import HttpResponse
from django.contrib.auth.decorators import user_passes_test

# Create your views here.
from django.http import JsonResponse




@login_required
@user_passes_test(lambda u: u.groups.filter(name='Admin').exists() or u.groups.filter(name='Assurance_and_Architecture').exists() or u.groups.filter(name='GRC').exists(), login_url='/accounts/login')
def vulerabilitiydb(request):

    vulnerability = VulnerabilityDB.objects.all()
    return render(request, "Vulnerability-Database/vulerabilitiydb.html", {'vulnerability': vulnerability})
    

@login_required
@user_passes_test(lambda u: u.groups.filter(name='Admin').exists(), login_url='login')
def vulerabilitiydbadd(request):
    form = VulnerabilityDBForm()
    if request.method == 'POST':
        # print(request.POST)
        form = VulnerabilityDBForm(request.POST)
        if form.is_valid():
            # print(form.cleaned_data['Vulnerability_ID'])
            form.save()
            return HttpResponse(status=200)
            
        else:
            # print(form.errors )
            return HttpResponse(status=500)
        
            # print(form.non_field_errors )
       

    if request.method == 'GET':
        context = {'form':form}
        return render(request, "Vulnerability-Database/vulerabilitiydbadd.html", context)

   
@login_required
@user_passes_test(lambda u: u.groups.filter(name='Admin').exists(), login_url='login')
def vulerabilitiydbedit(request, pk):
    vlun = VulnerabilityDB.objects.get(id=pk)
    form = VulnerabilityDBForm(instance=vlun)
    
    
    if request.method == 'POST':
        form = VulnerabilityDBForm(request.POST, instance=vlun)
        if form.is_valid():
            form.save()
            print(form)
            responseData = {'Status':'Success'}
            return JsonResponse(responseData)
        else:
            print(form.errors )
            print(form.non_field_errors )
            responseData = {'Status':'Fail'}
            return JsonResponse(responseData)
            
    context = {'form':form}
    return render(request, 'Vulnerability-Database/vulerabilitiydbedit.html', context)
    
@login_required
@user_passes_test(lambda u: u.groups.filter(name='Admin').exists(), login_url='login')
def vulerabilitiydbdelete(request, pk):
    VulnerabilityDB.objects.get(pk=pk).delete()
    return HttpResponse(status=200)
    # logout(request)


    # # Redirect to the error page

    # return redirect('/error')